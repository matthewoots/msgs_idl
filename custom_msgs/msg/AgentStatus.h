// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file AgentStatus.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_CUSTOM_MSGS_MSG_AGENTSTATUS_H_
#define _FAST_DDS_GENERATED_CUSTOM_MSGS_MSG_AGENTSTATUS_H_

#include "std_msgs/msg/Bool.h"
#include "std_msgs/msg/UInt8.h"
#include "std_msgs/msg/Float32.h"
#include "std_msgs/msg/String.h"

#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(AgentStatus_SOURCE)
#define AgentStatus_DllAPI __declspec( dllexport )
#else
#define AgentStatus_DllAPI __declspec( dllimport )
#endif // AgentStatus_SOURCE
#else
#define AgentStatus_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define AgentStatus_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace custom_msgs {
    namespace msg {
        /*!
         * @brief This class represents the structure AgentStatus defined by the user in the IDL file.
         * @ingroup AGENTSTATUS
         */
        class AgentStatus
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport AgentStatus();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~AgentStatus();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object custom_msgs::msg::AgentStatus that will be copied.
             */
            eProsima_user_DllExport AgentStatus(
                    const AgentStatus& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object custom_msgs::msg::AgentStatus that will be copied.
             */
            eProsima_user_DllExport AgentStatus(
                    AgentStatus&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object custom_msgs::msg::AgentStatus that will be copied.
             */
            eProsima_user_DllExport AgentStatus& operator =(
                    const AgentStatus& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object custom_msgs::msg::AgentStatus that will be copied.
             */
            eProsima_user_DllExport AgentStatus& operator =(
                    AgentStatus&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x custom_msgs::msg::AgentStatus object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const AgentStatus& x) const;

            /*!
             * @brief Comparison operator.
             * @param x custom_msgs::msg::AgentStatus object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const AgentStatus& x) const;

            /*!
             * @brief This function copies the value in member mav_id
             * @param _mav_id New value to be copied in member mav_id
             */
            eProsima_user_DllExport void mav_id(
                    const std_msgs::msg::UInt8& _mav_id);

            /*!
             * @brief This function moves the value in member mav_id
             * @param _mav_id New value to be moved in member mav_id
             */
            eProsima_user_DllExport void mav_id(
                    std_msgs::msg::UInt8&& _mav_id);

            /*!
             * @brief This function returns a constant reference to member mav_id
             * @return Constant reference to member mav_id
             */
            eProsima_user_DllExport const std_msgs::msg::UInt8& mav_id() const;

            /*!
             * @brief This function returns a reference to member mav_id
             * @return Reference to member mav_id
             */
            eProsima_user_DllExport std_msgs::msg::UInt8& mav_id();
            /*!
             * @brief This function copies the value in member connected
             * @param _connected New value to be copied in member connected
             */
            eProsima_user_DllExport void connected(
                    const std_msgs::msg::Bool& _connected);

            /*!
             * @brief This function moves the value in member connected
             * @param _connected New value to be moved in member connected
             */
            eProsima_user_DllExport void connected(
                    std_msgs::msg::Bool&& _connected);

            /*!
             * @brief This function returns a constant reference to member connected
             * @return Constant reference to member connected
             */
            eProsima_user_DllExport const std_msgs::msg::Bool& connected() const;

            /*!
             * @brief This function returns a reference to member connected
             * @return Reference to member connected
             */
            eProsima_user_DllExport std_msgs::msg::Bool& connected();
            /*!
             * @brief This function copies the value in member fm_state
             * @param _fm_state New value to be copied in member fm_state
             */
            eProsima_user_DllExport void fm_state(
                    const std_msgs::msg::String& _fm_state);

            /*!
             * @brief This function moves the value in member fm_state
             * @param _fm_state New value to be moved in member fm_state
             */
            eProsima_user_DllExport void fm_state(
                    std_msgs::msg::String&& _fm_state);

            /*!
             * @brief This function returns a constant reference to member fm_state
             * @return Constant reference to member fm_state
             */
            eProsima_user_DllExport const std_msgs::msg::String& fm_state() const;

            /*!
             * @brief This function returns a reference to member fm_state
             * @return Reference to member fm_state
             */
            eProsima_user_DllExport std_msgs::msg::String& fm_state();
            /*!
             * @brief This function copies the value in member fc_state
             * @param _fc_state New value to be copied in member fc_state
             */
            eProsima_user_DllExport void fc_state(
                    const std_msgs::msg::String& _fc_state);

            /*!
             * @brief This function moves the value in member fc_state
             * @param _fc_state New value to be moved in member fc_state
             */
            eProsima_user_DllExport void fc_state(
                    std_msgs::msg::String&& _fc_state);

            /*!
             * @brief This function returns a constant reference to member fc_state
             * @return Constant reference to member fc_state
             */
            eProsima_user_DllExport const std_msgs::msg::String& fc_state() const;

            /*!
             * @brief This function returns a reference to member fc_state
             * @return Reference to member fc_state
             */
            eProsima_user_DllExport std_msgs::msg::String& fc_state();
            /*!
             * @brief This function copies the value in member battery
             * @param _battery New value to be copied in member battery
             */
            eProsima_user_DllExport void battery(
                    const std_msgs::msg::Float32& _battery);

            /*!
             * @brief This function moves the value in member battery
             * @param _battery New value to be moved in member battery
             */
            eProsima_user_DllExport void battery(
                    std_msgs::msg::Float32&& _battery);

            /*!
             * @brief This function returns a constant reference to member battery
             * @return Constant reference to member battery
             */
            eProsima_user_DllExport const std_msgs::msg::Float32& battery() const;

            /*!
             * @brief This function returns a reference to member battery
             * @return Reference to member battery
             */
            eProsima_user_DllExport std_msgs::msg::Float32& battery();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const custom_msgs::msg::AgentStatus& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std_msgs::msg::UInt8 m_mav_id;
            std_msgs::msg::Bool m_connected;
            std_msgs::msg::String m_fm_state;
            std_msgs::msg::String m_fc_state;
            std_msgs::msg::Float32 m_battery;

        };
    } // namespace msg
} // namespace custom_msgs

#endif // _FAST_DDS_GENERATED_CUSTOM_MSGS_MSG_AGENTSTATUS_H_