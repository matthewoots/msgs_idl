// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file AgentStatus.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "AgentStatus.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define std_msgs_msg_Bool_max_cdr_typesize 1ULL;
#define std_msgs_msg_Float32_max_cdr_typesize 4ULL;
#define std_msgs_msg_String_max_cdr_typesize 260ULL;
#define std_msgs_msg_UInt8_max_cdr_typesize 1ULL;
#define custom_msgs_msg_AgentStatus_max_cdr_typesize 528ULL;
#define std_msgs_msg_Bool_max_key_cdr_typesize 0ULL;
#define std_msgs_msg_Float32_max_key_cdr_typesize 0ULL;
#define std_msgs_msg_String_max_key_cdr_typesize 0ULL;
#define std_msgs_msg_UInt8_max_key_cdr_typesize 0ULL;
#define custom_msgs_msg_AgentStatus_max_key_cdr_typesize 0ULL;

custom_msgs::msg::AgentStatus::AgentStatus()
{
    // std_msgs::msg::UInt8 m_mav_id

    // std_msgs::msg::Bool m_connected

    // std_msgs::msg::String m_fm_state

    // std_msgs::msg::String m_fc_state

    // std_msgs::msg::Float32 m_battery


}

custom_msgs::msg::AgentStatus::~AgentStatus()
{





}

custom_msgs::msg::AgentStatus::AgentStatus(
        const AgentStatus& x)
{
    m_mav_id = x.m_mav_id;
    m_connected = x.m_connected;
    m_fm_state = x.m_fm_state;
    m_fc_state = x.m_fc_state;
    m_battery = x.m_battery;
}

custom_msgs::msg::AgentStatus::AgentStatus(
        AgentStatus&& x) noexcept 
{
    m_mav_id = std::move(x.m_mav_id);
    m_connected = std::move(x.m_connected);
    m_fm_state = std::move(x.m_fm_state);
    m_fc_state = std::move(x.m_fc_state);
    m_battery = std::move(x.m_battery);
}

custom_msgs::msg::AgentStatus& custom_msgs::msg::AgentStatus::operator =(
        const AgentStatus& x)
{

    m_mav_id = x.m_mav_id;
    m_connected = x.m_connected;
    m_fm_state = x.m_fm_state;
    m_fc_state = x.m_fc_state;
    m_battery = x.m_battery;

    return *this;
}

custom_msgs::msg::AgentStatus& custom_msgs::msg::AgentStatus::operator =(
        AgentStatus&& x) noexcept
{

    m_mav_id = std::move(x.m_mav_id);
    m_connected = std::move(x.m_connected);
    m_fm_state = std::move(x.m_fm_state);
    m_fc_state = std::move(x.m_fc_state);
    m_battery = std::move(x.m_battery);

    return *this;
}

bool custom_msgs::msg::AgentStatus::operator ==(
        const AgentStatus& x) const
{

    return (m_mav_id == x.m_mav_id && m_connected == x.m_connected && m_fm_state == x.m_fm_state && m_fc_state == x.m_fc_state && m_battery == x.m_battery);
}

bool custom_msgs::msg::AgentStatus::operator !=(
        const AgentStatus& x) const
{
    return !(*this == x);
}

size_t custom_msgs::msg::AgentStatus::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return custom_msgs_msg_AgentStatus_max_cdr_typesize;
}

size_t custom_msgs::msg::AgentStatus::getCdrSerializedSize(
        const custom_msgs::msg::AgentStatus& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::UInt8::getCdrSerializedSize(data.mav_id(), current_alignment);
    current_alignment += std_msgs::msg::Bool::getCdrSerializedSize(data.connected(), current_alignment);
    current_alignment += std_msgs::msg::String::getCdrSerializedSize(data.fm_state(), current_alignment);
    current_alignment += std_msgs::msg::String::getCdrSerializedSize(data.fc_state(), current_alignment);
    current_alignment += std_msgs::msg::Float32::getCdrSerializedSize(data.battery(), current_alignment);

    return current_alignment - initial_alignment;
}

void custom_msgs::msg::AgentStatus::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_mav_id;
    scdr << m_connected;
    scdr << m_fm_state;
    scdr << m_fc_state;
    scdr << m_battery;

}

void custom_msgs::msg::AgentStatus::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_mav_id;
    dcdr >> m_connected;
    dcdr >> m_fm_state;
    dcdr >> m_fc_state;
    dcdr >> m_battery;
}

/*!
 * @brief This function copies the value in member mav_id
 * @param _mav_id New value to be copied in member mav_id
 */
void custom_msgs::msg::AgentStatus::mav_id(
        const std_msgs::msg::UInt8& _mav_id)
{
    m_mav_id = _mav_id;
}

/*!
 * @brief This function moves the value in member mav_id
 * @param _mav_id New value to be moved in member mav_id
 */
void custom_msgs::msg::AgentStatus::mav_id(
        std_msgs::msg::UInt8&& _mav_id)
{
    m_mav_id = std::move(_mav_id);
}

/*!
 * @brief This function returns a constant reference to member mav_id
 * @return Constant reference to member mav_id
 */
const std_msgs::msg::UInt8& custom_msgs::msg::AgentStatus::mav_id() const
{
    return m_mav_id;
}

/*!
 * @brief This function returns a reference to member mav_id
 * @return Reference to member mav_id
 */
std_msgs::msg::UInt8& custom_msgs::msg::AgentStatus::mav_id()
{
    return m_mav_id;
}
/*!
 * @brief This function copies the value in member connected
 * @param _connected New value to be copied in member connected
 */
void custom_msgs::msg::AgentStatus::connected(
        const std_msgs::msg::Bool& _connected)
{
    m_connected = _connected;
}

/*!
 * @brief This function moves the value in member connected
 * @param _connected New value to be moved in member connected
 */
void custom_msgs::msg::AgentStatus::connected(
        std_msgs::msg::Bool&& _connected)
{
    m_connected = std::move(_connected);
}

/*!
 * @brief This function returns a constant reference to member connected
 * @return Constant reference to member connected
 */
const std_msgs::msg::Bool& custom_msgs::msg::AgentStatus::connected() const
{
    return m_connected;
}

/*!
 * @brief This function returns a reference to member connected
 * @return Reference to member connected
 */
std_msgs::msg::Bool& custom_msgs::msg::AgentStatus::connected()
{
    return m_connected;
}
/*!
 * @brief This function copies the value in member fm_state
 * @param _fm_state New value to be copied in member fm_state
 */
void custom_msgs::msg::AgentStatus::fm_state(
        const std_msgs::msg::String& _fm_state)
{
    m_fm_state = _fm_state;
}

/*!
 * @brief This function moves the value in member fm_state
 * @param _fm_state New value to be moved in member fm_state
 */
void custom_msgs::msg::AgentStatus::fm_state(
        std_msgs::msg::String&& _fm_state)
{
    m_fm_state = std::move(_fm_state);
}

/*!
 * @brief This function returns a constant reference to member fm_state
 * @return Constant reference to member fm_state
 */
const std_msgs::msg::String& custom_msgs::msg::AgentStatus::fm_state() const
{
    return m_fm_state;
}

/*!
 * @brief This function returns a reference to member fm_state
 * @return Reference to member fm_state
 */
std_msgs::msg::String& custom_msgs::msg::AgentStatus::fm_state()
{
    return m_fm_state;
}
/*!
 * @brief This function copies the value in member fc_state
 * @param _fc_state New value to be copied in member fc_state
 */
void custom_msgs::msg::AgentStatus::fc_state(
        const std_msgs::msg::String& _fc_state)
{
    m_fc_state = _fc_state;
}

/*!
 * @brief This function moves the value in member fc_state
 * @param _fc_state New value to be moved in member fc_state
 */
void custom_msgs::msg::AgentStatus::fc_state(
        std_msgs::msg::String&& _fc_state)
{
    m_fc_state = std::move(_fc_state);
}

/*!
 * @brief This function returns a constant reference to member fc_state
 * @return Constant reference to member fc_state
 */
const std_msgs::msg::String& custom_msgs::msg::AgentStatus::fc_state() const
{
    return m_fc_state;
}

/*!
 * @brief This function returns a reference to member fc_state
 * @return Reference to member fc_state
 */
std_msgs::msg::String& custom_msgs::msg::AgentStatus::fc_state()
{
    return m_fc_state;
}
/*!
 * @brief This function copies the value in member battery
 * @param _battery New value to be copied in member battery
 */
void custom_msgs::msg::AgentStatus::battery(
        const std_msgs::msg::Float32& _battery)
{
    m_battery = _battery;
}

/*!
 * @brief This function moves the value in member battery
 * @param _battery New value to be moved in member battery
 */
void custom_msgs::msg::AgentStatus::battery(
        std_msgs::msg::Float32&& _battery)
{
    m_battery = std::move(_battery);
}

/*!
 * @brief This function returns a constant reference to member battery
 * @return Constant reference to member battery
 */
const std_msgs::msg::Float32& custom_msgs::msg::AgentStatus::battery() const
{
    return m_battery;
}

/*!
 * @brief This function returns a reference to member battery
 * @return Reference to member battery
 */
std_msgs::msg::Float32& custom_msgs::msg::AgentStatus::battery()
{
    return m_battery;
}


size_t custom_msgs::msg::AgentStatus::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return custom_msgs_msg_AgentStatus_max_key_cdr_typesize;
}

bool custom_msgs::msg::AgentStatus::isKeyDefined()
{
    return false;
}

void custom_msgs::msg::AgentStatus::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


