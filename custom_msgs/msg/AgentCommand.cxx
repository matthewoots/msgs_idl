// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file AgentCommand.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "AgentCommand.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define geometry_msgs_msg_Point_max_cdr_typesize 24ULL;
#define std_msgs_msg_String_max_cdr_typesize 260ULL;
#define std_msgs_msg_Int8_max_cdr_typesize 1ULL;
#define custom_msgs_msg_AgentCommand_max_cdr_typesize 2768ULL;
#define geometry_msgs_msg_Point_max_key_cdr_typesize 0ULL;
#define std_msgs_msg_String_max_key_cdr_typesize 0ULL;
#define std_msgs_msg_Int8_max_key_cdr_typesize 0ULL;
#define custom_msgs_msg_AgentCommand_max_key_cdr_typesize 0ULL;

custom_msgs::msg::AgentCommand::AgentCommand()
{
    // sequence<std_msgs::msg::Int8> m_agents

    // std_msgs::msg::String m_command

    // sequence<geometry_msgs::msg::Point> m_target


}

custom_msgs::msg::AgentCommand::~AgentCommand()
{



}

custom_msgs::msg::AgentCommand::AgentCommand(
        const AgentCommand& x)
{
    m_agents = x.m_agents;
    m_command = x.m_command;
    m_target = x.m_target;
}

custom_msgs::msg::AgentCommand::AgentCommand(
        AgentCommand&& x) noexcept 
{
    m_agents = std::move(x.m_agents);
    m_command = std::move(x.m_command);
    m_target = std::move(x.m_target);
}

custom_msgs::msg::AgentCommand& custom_msgs::msg::AgentCommand::operator =(
        const AgentCommand& x)
{

    m_agents = x.m_agents;
    m_command = x.m_command;
    m_target = x.m_target;

    return *this;
}

custom_msgs::msg::AgentCommand& custom_msgs::msg::AgentCommand::operator =(
        AgentCommand&& x) noexcept
{

    m_agents = std::move(x.m_agents);
    m_command = std::move(x.m_command);
    m_target = std::move(x.m_target);

    return *this;
}

bool custom_msgs::msg::AgentCommand::operator ==(
        const AgentCommand& x) const
{

    return (m_agents == x.m_agents && m_command == x.m_command && m_target == x.m_target);
}

bool custom_msgs::msg::AgentCommand::operator !=(
        const AgentCommand& x) const
{
    return !(*this == x);
}

size_t custom_msgs::msg::AgentCommand::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return custom_msgs_msg_AgentCommand_max_cdr_typesize;
}

size_t custom_msgs::msg::AgentCommand::getCdrSerializedSize(
        const custom_msgs::msg::AgentCommand& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.agents().size(); ++a)
    {
        current_alignment += std_msgs::msg::Int8::getCdrSerializedSize(data.agents().at(a), current_alignment);}

    current_alignment += std_msgs::msg::String::getCdrSerializedSize(data.command(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.target().size(); ++a)
    {
        current_alignment += geometry_msgs::msg::Point::getCdrSerializedSize(data.target().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void custom_msgs::msg::AgentCommand::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_agents;
    scdr << m_command;
    scdr << m_target;

}

void custom_msgs::msg::AgentCommand::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_agents;
    dcdr >> m_command;
    dcdr >> m_target;
}

/*!
 * @brief This function copies the value in member agents
 * @param _agents New value to be copied in member agents
 */
void custom_msgs::msg::AgentCommand::agents(
        const std::vector<std_msgs::msg::Int8>& _agents)
{
    m_agents = _agents;
}

/*!
 * @brief This function moves the value in member agents
 * @param _agents New value to be moved in member agents
 */
void custom_msgs::msg::AgentCommand::agents(
        std::vector<std_msgs::msg::Int8>&& _agents)
{
    m_agents = std::move(_agents);
}

/*!
 * @brief This function returns a constant reference to member agents
 * @return Constant reference to member agents
 */
const std::vector<std_msgs::msg::Int8>& custom_msgs::msg::AgentCommand::agents() const
{
    return m_agents;
}

/*!
 * @brief This function returns a reference to member agents
 * @return Reference to member agents
 */
std::vector<std_msgs::msg::Int8>& custom_msgs::msg::AgentCommand::agents()
{
    return m_agents;
}
/*!
 * @brief This function copies the value in member command
 * @param _command New value to be copied in member command
 */
void custom_msgs::msg::AgentCommand::command(
        const std_msgs::msg::String& _command)
{
    m_command = _command;
}

/*!
 * @brief This function moves the value in member command
 * @param _command New value to be moved in member command
 */
void custom_msgs::msg::AgentCommand::command(
        std_msgs::msg::String&& _command)
{
    m_command = std::move(_command);
}

/*!
 * @brief This function returns a constant reference to member command
 * @return Constant reference to member command
 */
const std_msgs::msg::String& custom_msgs::msg::AgentCommand::command() const
{
    return m_command;
}

/*!
 * @brief This function returns a reference to member command
 * @return Reference to member command
 */
std_msgs::msg::String& custom_msgs::msg::AgentCommand::command()
{
    return m_command;
}
/*!
 * @brief This function copies the value in member target
 * @param _target New value to be copied in member target
 */
void custom_msgs::msg::AgentCommand::target(
        const std::vector<geometry_msgs::msg::Point>& _target)
{
    m_target = _target;
}

/*!
 * @brief This function moves the value in member target
 * @param _target New value to be moved in member target
 */
void custom_msgs::msg::AgentCommand::target(
        std::vector<geometry_msgs::msg::Point>&& _target)
{
    m_target = std::move(_target);
}

/*!
 * @brief This function returns a constant reference to member target
 * @return Constant reference to member target
 */
const std::vector<geometry_msgs::msg::Point>& custom_msgs::msg::AgentCommand::target() const
{
    return m_target;
}

/*!
 * @brief This function returns a reference to member target
 * @return Reference to member target
 */
std::vector<geometry_msgs::msg::Point>& custom_msgs::msg::AgentCommand::target()
{
    return m_target;
}


size_t custom_msgs::msg::AgentCommand::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return custom_msgs_msg_AgentCommand_max_key_cdr_typesize;
}

bool custom_msgs::msg::AgentCommand::isKeyDefined()
{
    return false;
}

void custom_msgs::msg::AgentCommand::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


